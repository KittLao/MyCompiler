var -> or_expr
		| 'var' ID '=' or_expr
		| 'var' ID '=' var

or_expr -> and
		| or_expr 'or' and_term

and_term -> compare
		| and_term  'and' compare

compare -> expr
			| 'not'^* compare
			| compare '==' expr
			| compare '/=' expr
			| compare '>' expr
			| compare '>=' expr
			| compare '<' expr
			| compare '<=' expr

expr -> term
		| expr '+' term
		| expr '-' term

term -> ('+' + '-')^* factor
		| term '*' ('+' + '-')^* factor
		| term '/' ('+' + '-')^* factor

factor -> atom
			| '(' var ')'
			| factor '^' factor

atom = values
		| if_cond
		| for_loop
		| while_loop
		| decl_func
		| call_func

values -> INT | FLOAT | ID | True | False

if_cond -> 'if' or_expr 'then' var^* ('elif' or_expr 'then' var^*)^* ('else' var^*)? 'endif'

for_loop -> 'for' 'var' ID '=' expr 'to' expr 'then' var^* 'endfor'

while_loop -> 'while' or_expr 'then' var^* 'endwhile'

decl_func -> 'def' ID '(' arg_seq ')' '{' var^* '}'

call_func -> ID '(' seq ')'

arg_seq -> (ID (',' ID)^*)?

seq -> (or_expr (',' or_expr)^*)?









